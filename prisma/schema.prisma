// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  VENDOR
  ADMIN
  RIDER
}

enum ServiceType {
  CAR_WASH
  LAUNDRY
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

enum EmailTemplates {
  resetPassword
  userRegistration
}

enum MediaType {
  FILE
  IMAGE
  VIDEO
  AUDIO
}

enum NotificationType {
  VendorCreated
  RiderCreated
}

model UserMaster {
  userMasterId     Int            @id @default(autoincrement())
  email            String
  isEmailVerified  Boolean        @default(false)
  password         String
  profileImage     Int?
  roleId           Int
  userType         UserType       @default(CUSTOMER)
  phone            String
  location         String
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  isDeleted        Boolean        @default(false)
  customer         Customer?
  vendor           Vendor?
  rider            Rider?
  admin            Admin?
  refreshToken     RefreshToken[]
  Otp              Otp[]
  role             Role?          @relation(fields: [roleId], references: [id])
  ToNotification   Notification[] @relation("ToNotification")
  FromNotification Notification[] @relation("FromNotification")
}

model RefreshToken {
  tokenId      String     @id @default(uuid())
  userMaster   UserMaster @relation(fields: [userMasterId], references: [userMasterId])
  refreshToken String     @unique
  userMasterId Int
  createdAt    DateTime   @default(now())
  deleted      Boolean    @default(false)
}

model Otp {
  otpId        String     @id @default(uuid())
  userMasterId Int
  userMaster   UserMaster @relation(fields: [userMasterId], references: [userMasterId])
  otp          Int
  createdAt    DateTime   @default(now())
  expired      Boolean    @default(false)
}

model Admin {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  userMasterId Int        @unique
  userMaster   UserMaster @relation(fields: userMasterId, references: userMasterId)
  fullName     String
  // userAddress  UserAddress[]
}

model Customer {
  customerId   Int           @id @default(autoincrement())
  email        String        @unique
  userMasterId Int           @unique
  userMaster   UserMaster    @relation(fields: userMasterId, references: userMasterId)
  fullName     String
  userAddress  UserAddress[]
}

model Vendor {
  vendorId        Int             @id @default(autoincrement())
  userMasterId    Int             @unique
  userMaster      UserMaster      @relation(fields: userMasterId, references: userMasterId)
  fullName        String
  serviceType     ServiceType
  companyName     String
  companyEmail    String
  logo            Int
  workspaceImages Int[]
  businessLicense Int[]
  description     String
  userAddress     UserAddress[]
  status          Status          @default(PENDING)
  VendorService   VendorService[]
}

model Rider {
  riderId         Int           @id @default(autoincrement())
  userMasterId    Int           @unique
  userMaster      UserMaster    @relation(fields: userMasterId, references: userMasterId)
  fullName        String
  companyName     String
  companyEmail    String
  logo            Int
  workspaceImages Int[]
  businessLicense Int[]
  description     String
  userAddress     UserAddress[]
  status          Status        @default(PENDING)
}

model UserAddress {
  userAddressId Int       @id @default(autoincrement())
  fullAddress   String?
  city          City?     @relation(fields: [cityId], references: [cityId])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  isDeleted     Boolean   @default(false)
  vendor        Vendor?   @relation(fields: vendorId, references: vendorId)
  vendorId      Int?
  customerId    Int?
  customer      Customer? @relation(fields: customerId, references: customerId)
  cityId        Int?
  longitude     String?
  latitude      String?
  Rider         Rider?    @relation(fields: [riderId], references: [riderId])
  riderId       Int?
  // User          Admin?    @relation(fields: [adminId], references: [id])
  adminId       Int?
}

model Country {
  countryId   Int     @id
  countryName String
  states      State[]
}

model State {
  stateId   Int     @id
  stateName String
  countryId Int
  country   Country @relation(fields: [countryId], references: [countryId])
  cities    City[]
}

model City {
  cityId      Int           @id
  cityName    String
  State       State?        @relation(fields: [stateId], references: [stateId])
  stateId     Int?
  UserAddress UserAddress[]
}

model Services {
  serviceId     Int             @id @default(autoincrement())
  serviceName   String          @unique
  serviceType   ServiceType
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  isDeleted     Boolean         @default(false)
  VendorService VendorService[]
}

model Category {
  categoryId               Int                        @id @default(autoincrement())
  categoryName             String
  serviceType              ServiceType
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  isDeleted                Boolean                    @default(false)
  vendorServiceCategory    VendorServiceCategory[]
  VendorServiceSubcategory VendorServiceSubcategory[]
  AllocatePrice            AllocatePrice[]
}

model SubCategory {
  subCategoryId            Int                        @id @default(autoincrement())
  subCategoryName          String
  serviceType              ServiceType
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  isDeleted                Boolean                    @default(false)
  VendorServiceSubcategory VendorServiceSubcategory[]
  AllocatePrice            AllocatePrice[]
}

model VendorService {
  vendorServiceId       Int                     @id @default(autoincrement())
  vendorId              Int
  serviceId             Int
  description           String
  serviceImages         Int[]
  service               Services                @relation(fields: [serviceId], references: [serviceId])
  vendor                Vendor                  @relation(fields: [vendorId], references: [vendorId])
  vendorServiceCategory VendorServiceCategory[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt
  isDeleted             Boolean                 @default(false)
  AllocatePrice         AllocatePrice[]
}

// model VendorServiceDetail {
//   id    
// }

// model CarWashService {
//   id          Int             @id @default(autoincrement())
//   allocations AllocatePrice[]
// }

// model LaundryService {
//   id                     Int                    @id @default(autoincrement())
//   laundryServiceDetailId Int                    @unique
//   laundryServiceDetail   LaundryServiceDetail[]
//   AllocatePrice          AllocatePrice[]
// }

// model LaundryServiceDetail {
//   id               Int             @id @default(autoincrement())
//   categoryid       Int
//   allocations      AllocatePrice[]
//   LaundryService   LaundryService? @relation(fields: [laundryServiceId], references: [id])
//   laundryServiceId Int?
// }

model AllocatePrice {
  id              Int           @id @default(autoincrement())
  vendorServiceId Int
  subcategoryId   Int?
  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [categoryId])
  price           Float
  subcategory     SubCategory?  @relation(fields: [subcategoryId], references: [subCategoryId])
  vendorService   VendorService @relation(fields: [vendorServiceId], references: [vendorServiceId])
  // CarWashService         CarWashService?       @relation(fields: [catWashServiceId], references: [id])
  // catWashServiceId       Int?
  // LaundryService         LaundryService?       @relation(fields: [laundryServiceId], references: [id])
  // laundryServiceId       Int?
  // LaundryServiceDetail   LaundryServiceDetail? @relation(fields: [laundryServiceDetailId], references: [id])
  // laundryServiceDetailId Int?
}

model VendorServiceCategory {
  vendorServiceCategoryId  Int                        @id @default(autoincrement())
  vendorServiceId          Int
  categoryId               Int
  price                    Float?
  Category                 Category                   @relation(fields: [categoryId], references: [categoryId])
  VendorService            VendorService              @relation(fields: [vendorServiceId], references: [vendorServiceId])
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  isDeleted                Boolean                    @default(false)
  VendorServiceSubcategory VendorServiceSubcategory[]
}

model VendorServiceSubcategory {
  vendorServiceSubcategoryId Int                   @id @default(autoincrement())
  vendorServiceCategoryId    Int
  subCategoryId              Int
  categoryId                 Int
  price                      Float
  category                   Category              @relation(fields: [categoryId], references: [categoryId])
  subCategory                SubCategory           @relation(fields: [subCategoryId], references: [subCategoryId])
  vendorServiceCategory      VendorServiceCategory @relation(fields: [vendorServiceCategoryId], references: [vendorServiceCategoryId])
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @default(now()) @updatedAt
  isDeleted                  Boolean               @default(false)
}

model Role {
  id                    Int                     @id @default(autoincrement())
  name                  String
  userType              UserType
  createdAt             DateTime                @default(now()) @db.Timestamptz()
  updatedAt             DateTime                @default(now()) @updatedAt @db.Timestamptz()
  deletedAt             DateTime?               @db.Timestamptz()
  isDeleted             Boolean                 @default(false)
  isActive              Boolean                 @default(true)
  rolePermissionMapping RolePermissionMapping[]
  userMaster            UserMaster[]
  RoleRouteMapping      RoleRouteMapping[]
}

enum DefaultActions {
  ALL
  READ
  CREATE
  UPDATE
  DELETE
}

// Objects are models or database_tables name you can add as per your requirement.

model Permission {
  id                    Int                     @id @default(autoincrement())
  action                DefaultActions
  createdAt             DateTime                @default(now()) @db.Timestamptz()
  updatedAt             DateTime                @default(now()) @updatedAt @db.Timestamptz()
  deletedAt             DateTime?               @db.Timestamptz()
  RolePermissionMapping RolePermissionMapping[]
}

model Routes {
  id                    Int                     @id @default(autoincrement())
  routeName             String
  RolePermissionMapping RolePermissionMapping[]
  label                 String
  linkTo                String
  selectedOptionKey     String
  icon                  String
  RoleRouteMapping      RoleRouteMapping[]
}

model RoleRouteMapping {
  id      Int    @id @default(autoincrement())
  roleId  Int
  role    Role   @relation(fields: [roleId], references: [id])
  routeId Int
  route   Routes @relation(fields: [routeId], references: [id])
}

model RolePermissionMapping {
  id           Int        @id @default(autoincrement())
  permissionId Int
  routeId      Int
  createdAt    DateTime   @default(now()) @db.Timestamptz()
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz()
  deletedAt    DateTime?  @db.Timestamptz()
  permission   Permission @relation(fields: [permissionId], references: [id])
  route        Routes     @relation(fields: [routeId], references: [id])
  Role         Role?      @relation(fields: [roleId], references: [id])
  roleId       Int?
}

model Notification {
  id             Int              @id @default(autoincrement())
  toUser         Int
  fromUser       Int
  toUserMaster   UserMaster       @relation("ToNotification", fields: [toUser], references: [userMasterId])
  fromUserMaster UserMaster       @relation("FromNotification", fields: [fromUser], references: [userMasterId])
  type           NotificationType
  message        String
  seen           Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model Media {
  id           Int       @id @default(autoincrement())
  originalName String
  fileName     String
  encoding     String
  size         Int
  path         String    @unique
  type         MediaType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  isDeleted    Boolean   @default(false)
}
