// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  VENDOR
  ADMIN
  RIDER
}

enum ServiceType {
  CAR_WASH
  LAUNDRY
}

enum JobType {
  DELIVERY
  PICKUP
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

enum EmailTemplates {
  resetPassword
  userRegistration
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  ARCHIVE
  OTHER
}

enum NotificationType {
  VendorCreated
  RiderCreated
  BookingStatus
}

enum MediaStatus {
  UPLOADING
  READY
  STALE
}

enum MediaAccess {
  PUBLIC
  PRIVATE
}

enum Days {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum VendorServiceStatus {
  Available
  Unavailable
}

enum BookingStatus {
  Completed
  Pending
  Confirmed
  Rejected
  In_Progress
}

enum DeviceType {
  WEB
  ANDROID
  IOS
}

enum NotificationReadStatus {
  UNREAD
  READ
}

enum NotificationVisiblityStatus {
  VISIBLE
  HIDDEN
}

enum EntityType {
  VENDOR
  RIDER
  CUSTOMER
  BOOKINGMASTER
}

enum PaymentStatus {
  UNPAID
  PARTIAL_PAID
  FULLY_PAID
}

model UserMaster {
  userMasterId     Int            @id @default(autoincrement())
  email            String
  isEmailVerified  Boolean        @default(false)
  password         String
  roleId           Int
  profilePictureId Int?           @unique
  userType         UserType       @default(CUSTOMER)
  phone            String
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  isDeleted        Boolean        @default(false)
  customer         Customer?
  vendor           Vendor?
  rider            Rider?
  admin            Admin?
  refreshToken     RefreshToken[]
  Otp              Otp[]
  role             Role?          @relation(fields: [roleId], references: [id])
  notifications    Notification[]
  profilePicture   Media?         @relation(fields: [profilePictureId], references: [id])
  earnings         Earnings[]
  device           Device[]
}

model RefreshToken {
  tokenId      String     @id @default(uuid())
  userMaster   UserMaster @relation(fields: [userMasterId], references: [userMasterId])
  refreshToken String     @unique
  userMasterId Int
  createdAt    DateTime   @default(now())
  deleted      Boolean    @default(false)
}

model Otp {
  otpId        String     @id @default(uuid())
  userMasterId Int
  userMaster   UserMaster @relation(fields: [userMasterId], references: [userMasterId])
  otp          String
  createdAt    DateTime   @default(now())
  expired      Boolean    @default(false)
}

model Admin {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  userMasterId Int        @unique
  userMaster   UserMaster @relation(fields: userMasterId, references: userMasterId)
  fullName     String
}

model Customer {
  customerId    Int             @id @default(autoincrement())
  email         String          @unique
  userMasterId  Int             @unique
  userMaster    UserMaster      @relation(fields: userMasterId, references: userMasterId)
  fullName      String
  tapCustomerId String?
  status        Status?         @default(APPROVED)
  userAddress   UserAddress[]
  bookingMaster BookingMaster[]
  customerCards CustomerCards[]
}

model Vendor {
  vendorId            Int               @id @default(autoincrement())
  userMasterId        Int               @unique
  logoId              Int               @unique
  userMaster          UserMaster        @relation(fields: userMasterId, references: userMasterId)
  fullName            String
  serviceType         ServiceType
  companyName         String
  companyEmail        String
  isBusy              Boolean           @default(false)
  alwaysOpen          Boolean           @default(false)
  logo                Media             @relation(fields: [logoId], references: [id])
  description         String?
  tapBusinessId       String?
  tapBusinessEntityId String?
  tapBranchId         String?
  tapBrandId          String?
  tapMerchantId       String?
  tapPrimaryWalletId  String?
  tapWalletId         String?
  userAddress         UserAddress[]
  status              Status            @default(PENDING)
  vendorService       VendorService[]
  businessLicense     BusinessLicense[]
  workspaceImages     WorkspaceImages[]
  banking             Banking[]
  companySchedule     CompanySchedule[]
  deliverySchedule    DeliverySchedule?
  bookingMaster       BookingMaster[]
  UpdateApproval      UpdateApproval[]
}

model Rider {
  riderId             Int               @id @default(autoincrement())
  userMasterId        Int               @unique
  logoId              Int               @unique
  userMaster          UserMaster        @relation(fields: userMasterId, references: userMasterId)
  fullName            String
  companyName         String
  companyEmail        String
  isBusy              Boolean           @default(false)
  alwaysOpen          Boolean           @default(false)
  logo                Media             @relation(fields: [logoId], references: [id])
  description         String?
  tapBusinessId       String?
  tapBusinessEntityId String?
  tapBranchId         String?
  tapBrandId          String?
  tapMerchantId       String?
  tapPrimaryWalletId  String?
  tapWalletId         String?
  userAddress         UserAddress[]
  status              Status            @default(PENDING)
  businessLicense     BusinessLicense[]
  workspaceImages     WorkspaceImages[]
  banking             Banking[]
  companySchedule     CompanySchedule[]
  Job                 Job[]
  UpdateApproval      UpdateApproval[]
}

model UserAddress {
  userAddressId   Int             @id @default(autoincrement())
  fullAddress     String?
  title           String?
  city            City?           @relation(fields: [cityId], references: [cityId])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  isDeleted       Boolean         @default(false)
  vendor          Vendor?         @relation(fields: vendorId, references: vendorId)
  vendorId        Int?
  customerId      Int?
  customer        Customer?       @relation(fields: customerId, references: customerId)
  cityId          Int?
  longitude       Float?
  latitude        Float?
  Rider           Rider?          @relation(fields: [riderId], references: [riderId])
  riderId         Int?
  adminId         Int?
  isActive        Boolean         @default(true)
  pickupLocation  BookingMaster[] @relation("PickupLocation")
  dropoffLocation BookingMaster[] @relation("DropoffLocation")
}

model Banking {
  id            Int     @id @default(autoincrement())
  bankName      String
  accountTitle  String
  accountNumber String
  vendorId      Int?
  riderId       Int?
  rider         Rider?  @relation(fields: [riderId], references: [riderId])
  vendor        Vendor? @relation(fields: [vendorId], references: [vendorId])
  isDeleted     Boolean @default(false)
}

model CompanySchedule {
  id        Int     @id @default(autoincrement())
  vendorId  Int?
  riderId   Int?
  day       Days
  isActive  Boolean @default(true)
  startTime String
  endTime   String
  rider     Rider?  @relation(fields: [riderId], references: [riderId])
  vendor    Vendor? @relation(fields: [vendorId], references: [vendorId])
}

model Country {
  countryId    String  @id
  countryName  String
  shortName    String
  countryCode  String
  currency     String
  currencyName String
  states       State[]
}

model State {
  stateId   String  @id
  stateName String
  countryId String
  country   Country @relation(fields: [countryId], references: [countryId])
  cities    City[]
}

model City {
  cityId      Int           @id
  cityName    String
  State       State         @relation(fields: [stateId], references: [stateId])
  stateId     String
  UserAddress UserAddress[]
}

model Services {
  serviceId     Int             @id @default(autoincrement())
  serviceName   String
  serviceType   ServiceType
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  isDeleted     Boolean         @default(false)
  VendorService VendorService[]
}

model Category {
  categoryId    Int             @id @default(autoincrement())
  categoryName  String
  serviceType   ServiceType
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  isDeleted     Boolean         @default(false)
  AllocatePrice AllocatePrice[]
}

model SubCategory {
  subCategoryId   Int             @id @default(autoincrement())
  subCategoryName String
  serviceType     ServiceType
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  isDeleted       Boolean         @default(false)
  AllocatePrice   AllocatePrice[]
}

model VendorService {
  vendorServiceId Int                 @id @default(autoincrement())
  vendorId        Int
  serviceId       Int?
  serviceImageId  Int?                @unique
  description     String
  status          VendorServiceStatus @default(Available)
  service         Services?           @relation(fields: [serviceId], references: [serviceId])
  vendor          Vendor              @relation(fields: [vendorId], references: [vendorId])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  isDeleted       Boolean             @default(false)
  AllocatePrice   AllocatePrice[]
  serviceImage    ServiceImage[]
}

model AllocatePrice {
  id              Int             @id @default(autoincrement())
  vendorServiceId Int
  subcategoryId   Int?
  categoryId      Int
  category        Category        @relation(fields: [categoryId], references: [categoryId])
  price           Float
  isDeleted       Boolean         @default(false)
  subcategory     SubCategory?    @relation(fields: [subcategoryId], references: [subCategoryId])
  vendorService   VendorService   @relation(fields: [vendorServiceId], references: [vendorServiceId])
  bookingDetail   BookingDetail[]
}

model Role {
  id                    Int                     @id @default(autoincrement())
  name                  String
  userType              UserType
  createdAt             DateTime                @default(now()) @db.Timestamptz()
  updatedAt             DateTime                @default(now()) @updatedAt @db.Timestamptz()
  deletedAt             DateTime?               @db.Timestamptz()
  isDeleted             Boolean                 @default(false)
  isActive              Boolean                 @default(true)
  rolePermissionMapping RolePermissionMapping[]
  userMaster            UserMaster[]
  RoleRouteMapping      RoleRouteMapping[]
}

enum DefaultActions {
  ALL
  READ
  CREATE
  UPDATE
  DELETE
}

// Objects are models or database_tables name you can add as per your requirement.

model Permission {
  id                    Int                     @id @default(autoincrement())
  action                DefaultActions
  createdAt             DateTime                @default(now()) @db.Timestamptz()
  updatedAt             DateTime                @default(now()) @updatedAt @db.Timestamptz()
  deletedAt             DateTime?               @db.Timestamptz()
  RolePermissionMapping RolePermissionMapping[]
}

model Routes {
  id                    Int                     @id @default(autoincrement())
  routeName             String
  RolePermissionMapping RolePermissionMapping[]
  label                 String
  linkTo                String
  selectedOptionKey     String
  icon                  String
  RoleRouteMapping      RoleRouteMapping[]
}

model RoleRouteMapping {
  id      Int    @id @default(autoincrement())
  roleId  Int
  role    Role   @relation(fields: [roleId], references: [id])
  routeId Int
  route   Routes @relation(fields: [routeId], references: [id])
}

model RolePermissionMapping {
  id           Int        @id @default(autoincrement())
  permissionId Int
  routeId      Int
  createdAt    DateTime   @default(now()) @db.Timestamptz()
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz()
  deletedAt    DateTime?  @db.Timestamptz()
  permission   Permission @relation(fields: [permissionId], references: [id])
  route        Routes     @relation(fields: [routeId], references: [id])
  Role         Role?      @relation(fields: [roleId], references: [id])
  roleId       Int?
}

model Notification {
  id               Int                         @id @default(autoincrement())
  userMasterId     Int
  // toUserMaster   UserMaster?      @relation("ToNotification", fields: [toUser], references: [userMasterId])
  // fromUserMaster UserMaster?      @relation("FromNotification", fields: [fromUser], references: [userMasterId])
  entityId         Int? /// Entity or Model Id for example: userId
  entityType       EntityType? /// Entity or Model Type for example: User
  userMaster       UserMaster                  @relation(fields: [userMasterId], references: [userMasterId])
  notificationType NotificationType
  type             String
  title            String
  body             String
  data             Json?
  readStatus       NotificationReadStatus      @default(UNREAD)
  visibilityStatus NotificationVisiblityStatus @default(VISIBLE)
  createdAt        DateTime                    @default(now()) @db.Timestamptz()
  updatedAt        DateTime                    @default(now()) @updatedAt @db.Timestamptz()
  deletedAt        DateTime?                   @db.Timestamptz()
}

model Media {
  id                 Int                  @id @default(autoincrement())
  name               String
  extension          String?
  size               Float?
  location           String
  key                String
  meta               Json?                @db.JsonB
  createdAt          DateTime             @default(now()) @db.Timestamptz()
  updatedAt          DateTime             @default(now()) @updatedAt @db.Timestamptz()
  deletedAt          DateTime?            @db.Timestamptz()
  isDeleted          Boolean              @default(false)
  BusinessLicense    BusinessLicense[]
  WorkspaceImages    WorkspaceImages[]
  Vendor             Vendor?
  Rider              Rider?
  UserMaster         UserMaster?
  ServiceImage       ServiceImage[]
  bookingAttachments BookingAttachments[]
}

model BusinessLicense {
  id             Int     @id @default(autoincrement())
  vendorVendorId Int?
  riderRiderId   Int?
  mediaId        Int
  media          Media   @relation(fields: [mediaId], references: [id])
  vendor         Vendor? @relation(fields: [vendorVendorId], references: [vendorId])
  rider          Rider?  @relation(fields: [riderRiderId], references: [riderId])
  isDeleted      Boolean @default(false)
}

model ServiceImage {
  id              Int            @id @default(autoincrement())
  mediaId         Int
  vendorServiceId Int?
  media           Media          @relation(fields: [mediaId], references: [id])
  vendorService   VendorService? @relation(fields: [vendorServiceId], references: [vendorServiceId])
  isDeleted       Boolean        @default(false)
}

model WorkspaceImages {
  id             Int     @id @default(autoincrement())
  mediaId        Int
  vendorVendorId Int?
  riderRiderId   Int?
  media          Media   @relation(fields: [mediaId], references: [id])
  vendor         Vendor? @relation(fields: [vendorVendorId], references: [vendorId])
  rider          Rider?  @relation(fields: [riderRiderId], references: [riderId])
  isDeleted      Boolean @default(false)
}

model Earnings {
  id           Int         @id @default(autoincrement())
  userMaster   UserMaster  @relation(fields: [userMasterId], references: [userMasterId])
  userMasterId Int
  status       Status      @default(PENDING)
  jobType      JobType
  serviceType  ServiceType
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

model RatingSetup {
  id          Int         @id @default(autoincrement())
  rating      Float
  serviceType ServiceType
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model PlatformSetup {
  id        Int      @id @default(autoincrement())
  fee       Float
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DeliverySchedule {
  deliveryScheduleId  Int    @id @default(autoincrement())
  deliveryDurationMin Int?   @default(24)
  deliveryDurationMax Int?   @default(48)
  serviceDurationMin  Int?   @default(24)
  serviceDurationMax  Int?   @default(48)
  deliveryItemMin     Int?   @default(1)
  deliveryItemMax     Int?   @default(20)
  kilometerFare       Float? @default(0)
  vendorId            Int    @unique
  vendor              Vendor @relation(fields: [vendorId], references: [vendorId])
}

model BookingMaster {
  bookingMasterId    Int                  @id @default(autoincrement())
  vendorId           Int
  customerId         Int
  pickupLocationId   Int?
  dropffLocationId   Int?
  pickupTimeFrom     DateTime?
  pickupTimeTo       DateTime?
  dropoffTimeFrom    DateTime?
  dropoffTimeTo      DateTime?
  instructions       String?
  carNumberPlate     String?
  deliveryCharges    Float?               @default(0)
  vat                Float?               @default(0)
  totalPrice         Float
  tapAuthId          String
  isWithDelivery     Boolean              @default(false)
  tapPaymentStatus   PaymentStatus        @default(UNPAID)
  customer           Customer             @relation(fields: [customerId], references: [customerId])
  vendor             Vendor               @relation(fields: [vendorId], references: [vendorId])
  pickupLocation     UserAddress?         @relation("PickupLocation", fields: [pickupLocationId], references: [userAddressId])
  dropoffLocation    UserAddress?         @relation("DropoffLocation", fields: [dropffLocationId], references: [userAddressId])
  bookingDate        DateTime             @default(now())
  isDeleted          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  status             BookingStatus        @default(Pending)
  job                Job?
  bookingDetail      BookingDetail[]
  bookingAttachments BookingAttachments[]
}

model BookingDetail {
  bookingDetailId Int           @id @default(autoincrement())
  allocatePriceId Int
  quantity        Int
  price           Float
  bookingMasterId Int
  allocatePrice   AllocatePrice @relation(fields: [allocatePriceId], references: [id])
  bookingMaster   BookingMaster @relation(fields: [bookingMasterId], references: [bookingMasterId])
}

model BookingAttachments {
  id              Int           @id @default(autoincrement())
  bookingMasterId Int
  mediaId         Int
  media           Media         @relation(fields: [mediaId], references: [id])
  bookingMaster   BookingMaster @relation(fields: [bookingMasterId], references: [bookingMasterId])
  isDeleted       Boolean       @default(false)
}

model Job {
  id              Int            @id @default(autoincrement())
  bookingMasterId Int            @unique
  riderId         Int?
  jobType         JobType
  rider           Rider?         @relation(fields: [riderId], references: [riderId])
  bookingMaster   BookingMaster? @relation(fields: [bookingMasterId], references: [bookingMasterId])
}

model UpdateApproval {
  id                 Int     @id @default(autoincrement())
  companyEmail       String?
  businessLicenseIds String?
  vendorId           Int?
  riderId            Int?
  vendor             Vendor? @relation(fields: [vendorId], references: [vendorId])
  rider              Rider?  @relation(fields: [riderId], references: [riderId])
  status             Status  @default(PENDING)
}

model Device {
  id           Int        @id @default(autoincrement())
  userMasterId Int
  playerId     String?
  type         DeviceType @default(WEB)
  userMaster   UserMaster @relation(fields: [userMasterId], references: [userMasterId])
  createdAt    DateTime   @default(now()) @db.Timestamptz()
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz()
  deletedAt    DateTime?  @db.Timestamptz()
  isDeleted    Boolean    @default(false)
}

model CustomerCards {
  customerCardId Int      @id @default(autoincrement())
  customerId     Int
  tapCardId      Int      @unique
  cardNumber     String?
  fingerprint3D  String?
  firstSixDigit  String?
  lastFourDigit  String?
  bankName       String?
  bankId         String?
  brand          String?
  funding        String?
  schee          String?
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  customer       Customer @relation(fields: [customerId], references: [customerId])
}
