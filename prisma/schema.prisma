// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  VENDOR
  ADMIN
  RIDER
}

enum ServiceType {
  CAR_WASH
  LAUNDRY
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

model UserMaster {
  userMasterId    Int            @id @default(autoincrement())
  email           String
  isEmailVerified Boolean        @default(false)
  password        String
  profileImage    String?
  userType        UserType       @default(CUSTOMER)
  phone           String
  location        String
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  isDeleted       Boolean        @default(false)
  customer        Customer?
  vendor          Vendor?
  rider           Rider?
  hashedRt        String?
  refreshToken    RefreshToken[]
  User            User?
}

model User {
  userId       Int           @id @default(autoincrement())
  email        String        @unique
  userMasterId Int           @unique
  userMaster   UserMaster    @relation(fields: userMasterId, references: userMasterId)
  fullName     String
  userAddress  UserAddress[]
}

model Customer {
  customerId   Int           @id @default(autoincrement())
  email        String        @unique
  userMasterId Int           @unique
  userMaster   UserMaster    @relation(fields: userMasterId, references: userMasterId)
  fullName     String
  userAddress  UserAddress[]
}

model Vendor {
  vendorId        Int           @id @default(autoincrement())
  userMasterId    Int           @unique
  userMaster      UserMaster    @relation(fields: userMasterId, references: userMasterId)
  fullName        String
  serviceType     ServiceType
  companyName     String
  companyEmail    String
  logo            String
  workspaceImages String[]
  businessLicense String[]
  description     String
  userAddress     UserAddress[]
  status          Status        @default(PENDING)
}

model Rider {
  riderId         Int           @id @default(autoincrement())
  userMasterId    Int           @unique
  userMaster      UserMaster    @relation(fields: userMasterId, references: userMasterId)
  fullName        String
  serviceType     ServiceType
  companyName     String
  companyEmail    String
  logo            String
  workspaceImages String[]
  businessLicense String[]
  description     String
  userAddress     UserAddress[]
  status          Status        @default(PENDING)
}

model Services {
  serviceId   Int         @id @default(autoincrement())
  serviceName String
  serviceType ServiceType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  isDeleted   Boolean     @default(false)
}

model UserAddress {
  userAddressId Int       @id @default(autoincrement())
  fullAddress   String?
  city          City?     @relation(fields: [cityId], references: [cityId])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  isDeleted     Boolean   @default(false)
  vendor        Vendor?   @relation(fields: vendorId, references: vendorId)
  vendorId      Int?
  customerId    Int?
  customer      Customer? @relation(fields: customerId, references: customerId)
  cityId        Int?
  longitude     String?
  latitude      String?
  Rider         Rider?    @relation(fields: [riderId], references: [riderId])
  riderId       Int?
  User          User?     @relation(fields: [userUserId], references: [userId])
  userUserId    Int?
}

model Country {
  countryId   Int     @id
  countryName String
  states      State[]
}

model State {
  stateId   Int     @id
  stateName String
  countryId Int     @unique
  country   Country @relation(fields: [countryId], references: [countryId])
  cities    City[]
}

model City {
  cityId      Int           @id
  cityName    String
  State       State?        @relation(fields: [stateId], references: [stateId])
  stateId     Int?          @unique
  UserAddress UserAddress[]
}

model RefreshToken {
  tokenId      String     @id @default(uuid())
  userMaster   UserMaster @relation(fields: [userMasterId], references: [userMasterId])
  refreshToken String     @unique
  userMasterId Int        @unique
  createdAt    DateTime   @default(now())
  deleted      Boolean    @default(false)
}

model Role {
  id                    Int                     @id @default(autoincrement())
  name                  String
  createdAt             DateTime                @default(now()) @db.Timestamptz()
  updatedAt             DateTime                @default(now()) @updatedAt @db.Timestamptz()
  deletedAt             DateTime?               @db.Timestamptz()
  rolePermissionMapping RolePermissionMapping[]
  Routes                Routes[]
}

enum DefaultActions {
  ALL
  READ
  CREATE
  UPDATE
  DELETE
}

// Objects are models or database_tables name you can add as per your requirement.

model Permission {
  id                    Int                     @id @default(autoincrement())
  action                DefaultActions
  createdAt             DateTime                @default(now()) @db.Timestamptz()
  updatedAt             DateTime                @default(now()) @updatedAt @db.Timestamptz()
  deletedAt             DateTime?               @db.Timestamptz()
  RolePermissionMapping RolePermissionMapping[]
}

model Routes {
  id                    Int                     @id @default(autoincrement())
  Route                 String
  role                  Role                    @relation(fields: [roleId], references: [id])
  roleId                Int
  RolePermissionMapping RolePermissionMapping[]
}

model RolePermissionMapping {
  id           Int        @id @default(autoincrement())
  permissionId Int
  routeId      Int
  createdAt    DateTime   @default(now()) @db.Timestamptz()
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz()
  deletedAt    DateTime?  @db.Timestamptz()
  permission   Permission @relation(fields: [permissionId], references: [id])
  route        Routes     @relation(fields: [routeId], references: [id])
  Role         Role?      @relation(fields: [roleId], references: [id])
  roleId       Int?
}
